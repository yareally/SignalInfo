/*
Copyright (c) 2012 Wes Lanning, http://codingcreation.com

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

http://www.opensource.org/licenses/mit-license.php
*/

package com.cc.signalinfo.config;

import android.os.Build;
import android.os.StrictMode;
import com.cc.signalinfo.BuildConfig;

/**
 * @author Wes Lanning
 * @version 2012-12-21
 */
public final class AppSetup
{
    // TODO: add GSM_DB and GSM_ASU

    /*
      References:

      http://www.rapidtables.com/electric/dBm.htm

      http://www.etsi.org/deliver/etsi_ts/127000_127099/127007/08.05.00_60/ts_127007v080500p.pdf
      http://madwifi-project.org/attachment/wiki/UserDocs/RSSI/Converting_Signal_Strength.pdf?format=raw
      http://www.cs.uml.edu/~glchen/cs414-564/handouts/Mobile.Network.Data.ppt
      http://people.csail.mit.edu/bkph/cellular_repeater_antenna.shtml
      http://www.slideshare.net/faraz_husain/rscp-rssi-ecno-cqi
      http://stackoverflow.com/questions/15054498/android-signalstrength-terminology-explanation
      http://books.google.com/books?id=fuUwM1Hiu24C&dq=cdma+rssi+signal+range
      http://books.google.com/books?id=dAGfSkX3_vgC&pg=PA277&lpg=PA277&dq=cdma+dynamic+range&source=bl&ots=9xMZBtbHn8&sig=wyGFPugmM6nnCid3JXdc05i0mnA&hl=en&sa=X&ei=Zb97UaDINqno2gX464D4BA&ved=0CE8Q6AEwBQ#v=onepage&q=cdma%20dynamic%20range&f=false
      http://www.telecomhall.com/what-is-ecio-and-ebno.aspx (↓↓ basically rips off the source below ↓↓)
      ftp://hazards.cr.usgs.gov/Eq_Effects/GeekPack/Procedures-Configs-Info/2_Radios/Raven-X_XE/What-is-%20EcIo_Explanation.pdf

      Reference Source code:
      https://github.com/android/platform_frameworks_base/blob/master/telephony/java/android/telephony/SignalStrength.java
      https://github.com/android/platform_hardware_ril/blob/master/include/telephony/ril.h
     */


    /*
      Valid values are positive integers.  This value is the actual RSSI value
      multiplied by -1.  Example: If the actual RSSI is -75, then this response
      value will be 75.

      Dynamic range = input signal power range at the antenna port over which data error rate (BER or FER)
      doesn't exceed a specified value. Depends on receiver sensitivity at the lower end and allowed input
      power the data error rate does not exceed at the upper end.

      dB = lazy way to write dBm (but generally means a relative value and not concrete)
      dBm = decibel-milliwatt; 1dBm = 1.259 milliwatts
      mW = 1mW  10^(x / 10), where x = dBm
      -90dBm = 0.000000001W = .000001mW

      GSM_ASU = if GSM_SIG_STRENGTH == 99: then asu = -1; else: ASU = GSM_SIG_STRENGTH
      GSM_RSSI is calculated from GSM_SIG_STRENGTH via the formula:
      GSM_RSSI = if GSM_ASU != -1: -113 + (2  GSM_ASU); else: GSM_DB = -1
     */

    /*
      -- Ec/Io, CQI and related concepts --

      E = Average signal energy. Don't confuse with average power.
      b,c,s = different power points in time. Related to the measure (length) of the time (average power is independent of time)
      Eb = Bit Energy → amount of energy per bit (duh)
      Ec = Bit Chip Energy → amount of energy given off by a specific radio chip
      Es = Bit Symbol Energy → Es = Eb * k
      k = # of bits per second. In QPSK modulation where k = 2, Es = 2 * Eb
      Eb,Ec,Es = relate to Bit, Chip and Symbol Energies at different points in time (measured in W or mW)

      No = Noise Spectral Density (noise). Noise generated by RF components of the device & around the air (measured in W/Hz or mW/Hz or dBm)
      Io = Interference noise from other (emf) devices/antennas (more devices = more noise) (measured in W/Hz or mW/Hz or dBm)
      Eb/No = Bit Energy on the Spectral Noise Density (measured in dB)
      Eb/No is measured at the receiver and indicates signal strength.
      Ec/Io =  Signal interference ratio for GSM/CDMA. Basically Eb/No for cellular communication (measured in dB)
      C/I = Ec/Io for GSM basically.

      Ec/Io can be summed up as the ratio of 'good' energy over 'bad' energy (thus, the clarity of a given signal). It's a relative measurement.
      Ec/Io is really (Ec / (Io + No)), but No (noise) is trivial compared to interference, so it's ignored for calculations)
      For CDMA, Io = No (as CDMA is like a type of noise)

      Too low Ec/Io and you get poor data connections and dropped calls (or no connection at all). ~-10dB is a "decent" value.
      Even a good signal with a bad Ec/Io can make overall quality bad.

      RSCP = Received Signal Code Power. The power level of the pilot channel (in dBm or mW). Different
      cells using the same carrier can be compared. Cell tower handover or cell reselection are partially determined with it.
      This includes the average of all transmitting cell towers on the same frequency in range.

      RSSI = Overall signal power on the entire network including all components received. That includes the
      currently connected cell tower and neighboring ones of the same frequency. It's the measure of total
      wideband power on a carrier network

      RSCP = RSSI + Ec/Io
      Ec/Io = RSCP - RSSI (by log rules, as you can't divide dBm [convert to watts to divide or use rules])

      RSCP = PCPICH ([code <CPICH (common pilot channel)> power] if one is only served by a signal cell tower (not likely).)


      CQI (an alternative to Ec/Io) = takes into account of the overall load (true radio condition) of a cell, unlike Ec/Io.


     */

    /**
     * Calculated from the GSM ASU (the signal strength really)
     * Range is from -51dB (good) to -113dB (bad) or -1 for n/a
     */
    public static final int GSM_RSSI = 15;

    /**
     * Same as the GSM signal strength, unless GSM signal strength equals 99dB.
     * If GSM signal strength equals 99dB, then ASU is -1dB.
     */
    public static final int GSM_ASU = 16;

    /**
     * 0dB (best) to 31dB (highest) or 99dB (n/a).
     * Reference: TS 27.007 8.5
     */
    public static final int GSM_SIG_STRENGTH = 1;

    /**
     * 0 (lowest) to 7 (highest [worst]) or 99 (n/a) likelihood that a given
     * bit will be erroneous but will not be detected as such
     * Reference: TS 27.007 8.5
     *
     * @see <a href="http://en.wikipedia.org/wiki/Residual_bit_error_rate></a>
     */
    public static final int GSM_BIT_ERROR = 2;

    /**
     * Defined in dBm. Range varies, but probably -40dB to -140dB (really -120 on devices)
     */
    public static final int CDMA_RSSI = 3;

    /**
     * Valid values are positive integers.  This value is the actual Ec/Io multiplied
     * by -10.  Example: If the actual Ec/Io is -12.5 dB, then this response value
     * will be 125. Range is 0 (best) to -160 (worst, though really goes to -200)
     */
    public static final int CDMA_ECIO = 4;

    /**
     * Defined in dBm. Range varies, but probably -40dB to -140dB (really -120 on devices)
     */
    public static final int EVDO_RSSI = 5;

    /**
     * Valid values are positive integers.  This value is the actual Ec/Io multiplied
     * by -10.  Example: If the actual Ec/Io is -12.5 dB, then this response value
     * will be 125. Range is 0 (best) to -160 (worst, though really goes to -200)
     */
    public static final int EVDO_ECIO = 6;

    /**
     * EVDO_SNR: 0dB (worst) to 8dB (best)
     */
    public static final int EVDO_SNR = 7;

    /**
     * 0 (lowest) to 31dB (highest/best) or 99dB (n/a).
     * Reference: TS 27.007 8.5
     */
    public static final int LTE_SIG_STRENGTH = 8;

    /**
     * The current Reference Signal Receive Power in dBm multiplied by -1.
     * Range: 44dBm (best) to 140 dBm (really 120dBm on devices). 2147483647 denotes invalid value.
     * Reference: 3GPP TS 36.133 9.1.4
     */
    public static final int LTE_RSRP = 9;

    /**
     * The current Reference Signal Receive Quality in dB multiplied by -1.
     * Range: 20dB (worst) to 3 dB (best). 2147483647 denotes invalid value.
     * Reference: 3GPP TS 36.133 9.1.7
     */
    public static final int LTE_RSRQ = 10;

    /**
     * The current reference signal signal-to-noise ratio in 0.1 dB units.
     * Range: -200 to +300 (best) (-200 = -20.0 dB, +300 = 30dB). 2147483647 denotes invalid value.
     * Reference: 3GPP TS 36.101 8.1.1
     */
    public static final int LTE_SNR = 11;

    /**
     * The current Channel Quality Indicator.
     * Range: 0 (best) to 15. 2147483647 denotes invalid value.
     * Reference: 3GPP TS 36.101 9.2, 9.3, A.4
     */
    public static final int LTE_CQI = 12;

    public static final int IS_GSM = 13;

    /**
     * RSSI compute value = (carrier bandwidth) * log (# resource blocks)
     * Example RSSI (for verizon) = -(-17 + RSRP + RSRQ) (assuming RSRP and RSRQ are positive) (result should be positive)
     * RSSI is arbitrary as it depends on the compute value (which varies by carrier),
     * RSSI is estimated to be to 27dBm to 143dBm (by verizon calculations).
     * The 17 derived from 10 log 50
     */
    public static final int LTE_RSSI = 14;

    /**
     * Since it's a pain to use the xml string representation in a static context, redefining
     * n/a here. see strings.xml#na
     */
    public static final String DEFAULT_TXT = "n/a";

    /**
     * GSM RSSI = Level index of CPICH Received Signal Code Power in UMTS
     */

    /**
     * Key name for the stored preference that checks if a user agreed to warning prompt screen
     */
    public static final String PROMPT_SETTING = "promptWarningDialog";

    /**
     * Yeah dude, you really need to update your device because the LTE api settings have been there for 3+ years.
     * Making me have to work around your super old device with unneeded settings and code >:(
     */
    public static final String OLD_FUCKING_DEVICE = "hasNoLteApiSettings";

    public static final String FILTERED_SIGNAL_ARRAY_KEY = "signalArrayKey";
    public static final String FILTERED_SIGNAL_ARRAY_SIZE_KEY = "signalArraySize";
    /**
     * Enable strict mode for the activity
     */
    public static void enableStrictMode()
    {
        if (BuildConfig.DEBUG && Build.VERSION.SDK_INT >= 11) {
            StrictMode.setThreadPolicy(new StrictMode.ThreadPolicy.Builder().detectAll()
                .penaltyLog()
                .build());
            StrictMode.setVmPolicy(new StrictMode.VmPolicy.Builder().detectLeakedSqlLiteObjects()
                .detectLeakedClosableObjects()
                .penaltyLog()
                .penaltyDeath()
                .build());
        }
    }

    private AppSetup() {}
}
